{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///formly.min.js","webpack:///webpack/bootstrap dd7583dd9d5941c1ad08","webpack:///./index.js","webpack:///./angular-fix/index.js","webpack:///./directives/formly-custom-validation.js","webpack:///./directives/formly-field.js","webpack:///./directives/formly-focus.js","webpack:///./directives/formly-form.js","webpack:///./directives/index.js","webpack:///./index.common.js","webpack:///./providers/formlyConfig.js","webpack:///./providers/formlyErrorAndWarningsUrlPrefix.js","webpack:///./providers/formlyUsability.js","webpack:///./providers/formlyValidationMessages.js","webpack:///./providers/formlyVersion.js","webpack:///./providers/index.js","webpack:///./run/formlyNgModelAttrsManipulator.js","webpack:///./run/index.js","webpack:///./services/formlyUtil.js","webpack:///./services/formlyWarn.js","webpack:///./services/index.js","webpack:///external \"angular\""],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_19__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","angular","version","window","ngModule","formlyCustomValidation","formlyUtil","$q","isPromiseLike","obj","isFunction","then","checkValidators","validators","allowedProperties","validatorsWithExtraProps","forEach","validator","name","isString","extraProps","v","key","indexOf","push","length","Object","keys","Error","join","JSON","stringify","link","scope","el","attrs","ctrl","$eval","options","validation","messages","useNewValidatorsApi","hasOwnProperty","setupWithValidators","validatorCollection","isPossiblyAsync","modelValue","viewValue","value","formlyEval","when","reject","setupWithParsers","inFlightValidator","undefined","$parsers","unshift","isValid","$modelValue","$pending","$setValidity","message","$viewValue","isObject","expression","directive","tests","$inject","formlyField","$http","$compile","$templateCache","formlyConfig","formlyValidationMessages","formlyUsability","formlyWarn","asHtml","wrapper","element","append","html","getFieldTemplate","type","getType","template","templateUrl","getFieldError","getTemplate","isUrl","httpOptions","cache","get","response","data","error","transcludeInWrappers","getWrapperOption","checkWrapper","promises","map","w","all","wrappersTemplates","wrapperTemplate","index","checkWrapperTemplate","reverse","totalWrapper","shift","doTransclusion","superWrapper","transcludeEl","find","replaceWith","arrayify","getWrapper","getWrapperByType","typeWrappers","concat","defaultWrapper","apiCheck","getTemplateOptionsCount","templateOptions","isDefined","filter","prop","restrict","transclude","model","formId","fields","form","controller","$scope","$timeout","$parse","$controller","runExpressions","field","currentValue","valueGetterSetter","expressionProperties","setter","assign","promise","newVal","simplifyLife","reverseDeepMerge","mergeFieldOptionsWithTypeDefaults","mergeOptions","defaultOptions","properOrder","optionsTypes","typeName","extraOptions","extendOptionsWithDefaults","extend","setFormControl","cleanUp","stopWaitingForDestroy","clearInterval","interval","noFormControl","maxTime","intervalTime","iterations","setInterval","formControl","$on","addModelWatcher","$watch","addShowMessagesWatcher","show","errorExistsAndShouldBeVisible","addValidationMessages","invokeControllers","arguments","opts","fieldType","getFieldId","to","setElementTemplate","templateEl","contents","apply","thusly","args","runManipulators","manipulators","chain","manipulator","newTemplate","templateManipulators","preWrapper","postWrapper","isArray","$document","previousEl","doc","$observe","activeElement","focus","focusWait","blur","_toArray","arr","Array","from","_slice","prototype","slice","formlyForm","currentFormId","rootEl","replace","attachKey","setupWatchers","watcher","watchers","listener","watchExpression","getWatchExpression","watchListener","getWatchListener","stopWatching","watchDeep","originalExpression","modifyArgs","displayName","originalListener","_len","originalArgs","_key","newResult","getFormlyError","ngModuleName","formlyUsabilityProvider","setType","getError","checkType","typeMap","throwError","errorContext","overwriteOk","checkOverwrite","setWrapper","wrapperOptions","types","getOptionsTypes","getOptionsName","checkWrapperAPI","templateWrappersMap","defaultWrapperName","checkWrapperTypes","shouldThrow","every","property","object","newValue","objectName","warn","wrappers","removeWrapperByName","removeWrappersForType","_this","disableWarnings","console","_this2","extras","disableNgModelAttrsManipulator","$get","provider","constant","errorInfoSlug","getErrorMessage","toJson","url","errorsAndWarningsUrlPrefix","additionalInfo","formlyTransclude","addTemplateOptionValueMessage","prefix","suffix","alternate","templateOptionValue","addStringMessage","string","addFormlyNgModelAttrsManipulator","ngModelAttrsManipulator","addTemplateOptionsAttrs","ep","ngModelAttributes","getBuiltinAttributes","ngModelAttrs","val","attrVal","attrName","ref","toVal","epVal","getEpValue","inTo","inEp","bound","attribute","addIfNotPresent","modelEls","bothAttributeAndBound","expressionOnly","attributeOnly","item","propName","substr","toUpperCase","attr","noTouchy","querySelectorAll","modelOptions","getterSetter","run","dest","src","objAndSameType","copy","obj1","obj2","getPrototypeOf","formlyErrorAndWarningsUrlPrefix","$log","warnInfoSlug"],"mappings":"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","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormly\"] = factory(require(\"angular\"));\n\telse\n\t\troot[\"ngFormly\"] = factory(root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_19__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormly\"] = factory(require(\"angular\"));\n\telse\n\t\troot[\"ngFormly\"] = factory(root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_19__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = __webpack_require__(7);\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\t// some versions of angular don't export the angular module properly,\n\t// so we get it from window in this case.\n\tvar angular = __webpack_require__(19);\n\tif (!angular.version) {\n\t  angular = window.angular;\n\t}\n\tmodule.exports = angular;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyCustomValidation\", formlyCustomValidation);\n\t\n\t  formlyCustomValidation.tests = false ? require(\"./formly-custom-validation.test\")(ngModule) : null;\n\t\n\t  function formlyCustomValidation(formlyUtil, $q) {\n\t    return {\n\t      require: \"ngModel\",\n\t      link: function (scope, el, attrs, ctrl) {\n\t        var validators = scope.$eval(attrs.formlyCustomValidation);\n\t        if (!validators) {\n\t          return;\n\t        }\n\t        checkValidators(validators);\n\t        scope.options.validation.messages = scope.options.validation.messages || {};\n\t\n\t\n\t        var useNewValidatorsApi = ctrl.hasOwnProperty(\"$validators\") && !attrs.hasOwnProperty(\"useParsers\");\n\t        angular.forEach(validators, function (validator, name) {\n\t          var message = validator.message;\n\t          if (message) {\n\t            scope.options.validation.messages[name] = function () {\n\t              return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n\t            };\n\t          }\n\t          validator = angular.isObject(validator) ? validator.expression : validator;\n\t          var isPossiblyAsync = !angular.isString(validator);\n\t          if (useNewValidatorsApi) {\n\t            setupWithValidators();\n\t          } else {\n\t            setupWithParsers();\n\t          }\n\t\n\t          function setupWithValidators() {\n\t            var validatorCollection = isPossiblyAsync ? \"$asyncValidators\" : \"$validators\";\n\t            ctrl[validatorCollection][name] = function (modelValue, viewValue) {\n\t              var value = formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n\t              if (isPossiblyAsync) {\n\t                return isPromiseLike(value) ? value : value ? $q.when(value) : $q.reject(value);\n\t              } else {\n\t                return value;\n\t              }\n\t            };\n\t          }\n\t\n\t          function setupWithParsers() {\n\t            var inFlightValidator = undefined;\n\t            ctrl.$parsers.unshift(function (viewValue) {\n\t              var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n\t              if (isPromiseLike(isValid)) {\n\t                ctrl.$pending = ctrl.$pending || {};\n\t                ctrl.$pending[name] = true;\n\t                inFlightValidator = isValid;\n\t                isValid.then(function () {\n\t                  if (inFlightValidator === isValid) {\n\t                    ctrl.$setValidity(name, true);\n\t                  }\n\t                })[\"catch\"](function () {\n\t                  if (inFlightValidator === isValid) {\n\t                    ctrl.$setValidity(name, false);\n\t                  }\n\t                })[\"finally\"](function () {\n\t                  if (Object.keys(ctrl.$pending).length === 1) {\n\t                    delete ctrl.$pending;\n\t                  } else {\n\t                    delete ctrl.$pending[name];\n\t                  }\n\t                });\n\t              } else {\n\t                ctrl.$setValidity(name, isValid);\n\t              }\n\t              return viewValue;\n\t            });\n\t          }\n\t        });\n\t      }\n\t    };\n\t\n\t    function isPromiseLike(obj) {\n\t      return obj && angular.isFunction(obj.then);\n\t    }\n\t\n\t    function checkValidators(validators) {\n\t      var allowedProperties = [\"expression\", \"message\"];\n\t      var validatorsWithExtraProps = {};\n\t      angular.forEach(validators, function (validator, name) {\n\t        if (angular.isString(validator)) {\n\t          return;\n\t        }\n\t        var extraProps = [];\n\t        angular.forEach(validator, function (v, key) {\n\t          if (allowedProperties.indexOf(key) === -1) {\n\t            extraProps.push(key);\n\t          }\n\t        });\n\t        if (extraProps.length) {\n\t          validatorsWithExtraProps[name] = extraProps;\n\t        }\n\t      });\n\t      if (Object.keys(validatorsWithExtraProps).length) {\n\t        throw new Error([\"Validators are only allowed to be functions or objects that have \" + allowedProperties.join(\", \") + \".\", \"You provided some extra properties: \" + JSON.stringify(validatorsWithExtraProps)].join(\" \"));\n\t      }\n\t    }\n\t  }\n\t  formlyCustomValidation.$inject = [\"formlyUtil\", \"$q\"];\n\t};\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyField\", formlyField);\n\t\n\t  formlyField.tests = false ? require(\"./formly-field.test\")(ngModule) : null;\n\t\n\t  function formlyField($http, $q, $compile, $templateCache, formlyConfig, formlyValidationMessages, formlyUtil, formlyUsability, formlyWarn) {\n\t    return {\n\t      restrict: \"AE\",\n\t      transclude: true,\n\t      scope: {\n\t        options: \"=\",\n\t        model: \"=\",\n\t        formId: \"=?\",\n\t        index: \"=?\",\n\t        fields: \"=?\",\n\t        form: \"=?\"\n\t      },\n\t      controller: [\"$scope\", \"$timeout\", \"$parse\", \"$controller\", function fieldController($scope, $timeout, $parse, $controller) {\n\t        var opts = $scope.options;\n\t        var fieldType = opts.type && formlyConfig.getType(opts.type);\n\t        simplifyLife(opts);\n\t        mergeFieldOptionsWithTypeDefaults(opts, fieldType);\n\t        apiCheck(opts);\n\t        // set field id to link labels and fields\n\t        $scope.id = formlyUtil.getFieldId($scope.formId, opts, $scope.index);\n\t\n\t        // initalization\n\t        extendOptionsWithDefaults(opts, $scope.index);\n\t        runExpressions();\n\t        setFormControl($scope, opts);\n\t        addModelWatcher($scope, opts);\n\t        addShowMessagesWatcher($scope, opts);\n\t        addValidationMessages(opts);\n\t        invokeControllers($scope, opts, fieldType);\n\t        // simplify things\n\t        // create $scope.to so template authors can reference to instead of $scope.options.templateOptions\n\t        $scope.to = $scope.options.templateOptions;\n\t\n\t        // function definitions\n\t        function runExpressions() {\n\t          $timeout(function () {\n\t            // must run on next tick to make sure that the current value is correct.\n\t            var field = $scope.options;\n\t            var currentValue = valueGetterSetter();\n\t            angular.forEach(field.expressionProperties, function runExpression(expression, prop) {\n\t              var setter = $parse(prop).assign;\n\t              var promise = $q.when(formlyUtil.formlyEval($scope, expression, currentValue));\n\t              promise.then(function (value) {\n\t                setter(field, value);\n\t              });\n\t            });\n\t          });\n\t        }\n\t\n\t        function valueGetterSetter(newVal) {\n\t          if (!$scope.model || !$scope.options.key) {\n\t            return;\n\t          }\n\t          if (angular.isDefined(newVal)) {\n\t            $scope.model[$scope.options.key] = newVal;\n\t          }\n\t          return $scope.model[$scope.options.key];\n\t        }\n\t\n\t        function simplifyLife(options) {\n\t          // add a few empty objects (if they don't already exist) so you don't have to undefined check everywhere\n\t          formlyUtil.reverseDeepMerge(options, {\n\t            data: {},\n\t            templateOptions: {},\n\t            validation: {}\n\t          });\n\t        }\n\t\n\t        function mergeFieldOptionsWithTypeDefaults(options, type) {\n\t          if (type) {\n\t            mergeOptions(options, type.defaultOptions);\n\t          }\n\t          var properOrder = arrayify(options.optionsTypes).reverse(); // so the right things are overridden\n\t          angular.forEach(properOrder, function (typeName) {\n\t            mergeOptions(options, formlyConfig.getType(typeName, true, options).defaultOptions);\n\t          });\n\t        }\n\t\n\t        function mergeOptions(options, extraOptions) {\n\t          if (extraOptions) {\n\t            if (angular.isFunction(extraOptions)) {\n\t              extraOptions = extraOptions(options);\n\t            }\n\t            formlyUtil.reverseDeepMerge(options, extraOptions);\n\t          }\n\t        }\n\t\n\t        function extendOptionsWithDefaults(options, index) {\n\t          angular.extend(options, {\n\t            // attach the key in case the formly-field directive is used directly\n\t            key: options.key || index || 0,\n\t            value: valueGetterSetter,\n\t            runExpressions: runExpressions\n\t          });\n\t        }\n\t\n\t        // initialization functions\n\t        function setFormControl(scope, options) {\n\t          if (options.noFormControl) {\n\t            return;\n\t          }\n\t          var stopWaitingForDestroy;\n\t          var maxTime = 2000;\n\t          var intervalTime = 5;\n\t          var iterations = 0;\n\t          var interval = setInterval(function () {\n\t            iterations++;\n\t            if (!angular.isDefined(options.key)) {\n\t              return cleanUp();\n\t            }\n\t            var formControl = scope.form && scope.form[scope.id];\n\t            if (formControl) {\n\t              options.formControl = formControl;\n\t              cleanUp();\n\t            } else if (intervalTime * iterations > maxTime) {\n\t              formlyWarn(\"couldnt-set-the-formcontrol-after-timems\", \"Couldn't set the formControl after \" + maxTime + \"ms\", scope);\n\t              cleanUp();\n\t            }\n\t          }, intervalTime);\n\t          stopWaitingForDestroy = scope.$on(\"$destroy\", cleanUp);\n\t\n\t          function cleanUp() {\n\t            stopWaitingForDestroy();\n\t            clearInterval(interval);\n\t          }\n\t        }\n\t\n\t        function addModelWatcher(scope, options) {\n\t          if (options.model) {\n\t            scope.$watch(\"options.model\", runExpressions, true);\n\t          }\n\t        }\n\t\n\t        function addShowMessagesWatcher(scope, options) {\n\t          var expression = \"options.formControl.$invalid && (options.formControl.$touched || options.validation.show)\";\n\t          scope.$watch(expression, function (show) {\n\t            options.validation.errorExistsAndShouldBeVisible = show;\n\t          });\n\t        }\n\t\n\t        function addValidationMessages(options) {\n\t          options.validation.messages = options.validation.messages || {};\n\t          angular.forEach(formlyValidationMessages.messages, function (expression, name) {\n\t            if (!options.validation.messages[name]) {\n\t              options.validation.messages[name] = function (viewValue, modelValue, scope) {\n\t                return formlyUtil.formlyEval(scope, expression, modelValue, viewValue);\n\t              };\n\t            }\n\t          });\n\t        }\n\t\n\t        function invokeControllers(scope) {\n\t          var options = arguments[1] === undefined ? {} : arguments[1];\n\t          var type = arguments[2] === undefined ? {} : arguments[2];\n\t          angular.forEach([type.controller, options.controller], function (controller) {\n\t            if (controller) {\n\t              $controller(controller, { $scope: scope });\n\t            }\n\t          });\n\t        }\n\t      }],\n\t      link: function fieldLink(scope, el) {\n\t        var type = scope.options.type && formlyConfig.getType(scope.options.type);\n\t        var args = arguments;\n\t        var thusly = this;\n\t        getFieldTemplate(scope.options).then(runManipulators(formlyConfig.templateManipulators.preWrapper)).then(transcludeInWrappers(scope.options)).then(runManipulators(formlyConfig.templateManipulators.postWrapper)).then(setElementTemplate)[\"catch\"](function (error) {\n\t          formlyWarn(\"there-was-a-problem-setting-the-template-for-this-field\", \"There was a problem setting the template for this field \", scope.options, error);\n\t        });\n\t\n\t        function setElementTemplate(templateEl) {\n\t          el.html(asHtml(templateEl));\n\t          $compile(el.contents())(scope);\n\t          if (type && type.link) {\n\t            type.link.apply(thusly, args);\n\t          }\n\t          if (scope.options.link) {\n\t            scope.options.link.apply(thusly, args);\n\t          }\n\t        }\n\t\n\t        function runManipulators(manipulators) {\n\t          return function runManipulatorsOnTemplate(template) {\n\t            var chain = $q.when(template);\n\t            angular.forEach(manipulators, function (manipulator) {\n\t              chain = chain.then(function (template) {\n\t                return $q.when(manipulator(template, scope.options, scope)).then(function (newTemplate) {\n\t                  return angular.isString(newTemplate) ? newTemplate : asHtml(newTemplate);\n\t                });\n\t              });\n\t            });\n\t            return chain;\n\t          };\n\t        }\n\t      }\n\t    };\n\t\n\t    function asHtml(el) {\n\t      var wrapper = angular.element(\"<a></a>\");\n\t      return wrapper.append(el).html();\n\t    }\n\t\n\t    function getFieldTemplate(options) {\n\t      var type = formlyConfig.getType(options.type, true, options);\n\t      var template = options.template || type && type.template;\n\t      var templateUrl = options.templateUrl || type && type.templateUrl;\n\t      if (!template && !templateUrl) {\n\t        throw formlyUsability.getFieldError(\"template-type-type-not-supported\", \"template type '\" + options.type + \"' not supported. On element:\", options);\n\t      }\n\t      return getTemplate(template || templateUrl, !template);\n\t    }\n\t\n\t\n\t    function getTemplate(template, isUrl) {\n\t      if (!isUrl) {\n\t        return $q.when(template);\n\t      } else {\n\t        var httpOptions = { cache: $templateCache };\n\t        return $http.get(template, httpOptions).then(function (response) {\n\t          return response.data;\n\t        })[\"catch\"](function (error) {\n\t          formlyWarn(\"problem-loading-template-for-templateurl\", \"Problem loading template for \" + template, error);\n\t        });\n\t      }\n\t    }\n\t\n\t    function transcludeInWrappers(options) {\n\t      var wrapper = getWrapperOption(options);\n\t\n\t      return function transcludeTemplate(template) {\n\t        if (!wrapper.length) {\n\t          return $q.when(template);\n\t        }\n\t\n\t        wrapper.forEach(formlyUsability.checkWrapper);\n\t        var promises = wrapper.map(function (w) {\n\t          return getTemplate(w.template || w.templateUrl, !w.template);\n\t        });\n\t        return $q.all(promises).then(function (wrappersTemplates) {\n\t          wrappersTemplates.forEach(function (wrapperTemplate, index) {\n\t            formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper[index]);\n\t          });\n\t          wrappersTemplates.reverse(); // wrapper 0 is wrapped in wrapper 1 and so on...\n\t          var totalWrapper = wrappersTemplates.shift();\n\t          wrappersTemplates.forEach(function (wrapperTemplate) {\n\t            totalWrapper = doTransclusion(totalWrapper, wrapperTemplate);\n\t          });\n\t          return doTransclusion(totalWrapper, template);\n\t        });\n\t      };\n\t    }\n\t\n\t    function doTransclusion(wrapper, template) {\n\t      var superWrapper = angular.element(\"<a></a>\"); // this allows people not have to have a single root in wrappers\n\t      superWrapper.append(wrapper);\n\t      var transcludeEl = superWrapper.find(\"formly-transclude\");\n\t      transcludeEl.replaceWith(template);\n\t      return superWrapper.html();\n\t    }\n\t\n\t    function getWrapperOption(options) {\n\t      var wrapper = options.wrapper;\n\t      // explicit null means no wrapper\n\t      if (wrapper === null) {\n\t        return [];\n\t      }\n\t\n\t      // nothing specified means use the default wrapper for the type\n\t      if (!wrapper) {\n\t        // get all wrappers that specify they apply to this type\n\t        wrapper = arrayify(formlyConfig.getWrapperByType(options.type));\n\t      } else {\n\t        wrapper = arrayify(wrapper).map(formlyConfig.getWrapper);\n\t      }\n\t\n\t      // get all wrappers for that this type specified that it uses.\n\t      var type = formlyConfig.getType(options.type, true, options);\n\t      if (type && type.wrapper) {\n\t        var typeWrappers = arrayify(type.wrapper).map(formlyConfig.getWrapper);\n\t        wrapper = wrapper.concat(typeWrappers);\n\t      }\n\t\n\t      // add the default wrapper last\n\t      var defaultWrapper = formlyConfig.getWrapper();\n\t      if (defaultWrapper) {\n\t        wrapper.push(defaultWrapper);\n\t      }\n\t      return wrapper;\n\t    }\n\t\n\t    function apiCheck(options) {\n\t      var templateOptions = getTemplateOptionsCount(options);\n\t      if (templateOptions === 0) {\n\t        throw formlyUsability.getFieldError(\"you-must-provide-one-of-type-template-or-templateurl-for-a-field\", \"You must provide one of type, template, or templateUrl for a field\", options);\n\t      } else if (templateOptions > 1) {\n\t        throw formlyUsability.getFieldError(\"you-must-only-provide-a-type-template-or-templateurl-for-a-field\", \"You must only provide a type, template, or templateUrl for a field\", options);\n\t      }\n\t\n\t      // check that only allowed properties are provided\n\t      var allowedProperties = [\"type\", \"template\", \"templateUrl\", \"key\", \"model\", \"expressionProperties\", \"data\", \"templateOptions\", \"wrapper\", \"modelOptions\", \"watcher\", \"validators\", \"noFormControl\", \"hide\", \"ngModelAttrs\", \"optionsTypes\", \"link\", \"controller\", \"validation\",\n\t      // things we add to the field after the fact are ok\n\t      \"formControl\", \"value\", \"runExpressions\"];\n\t      var extraProps = Object.keys(options).filter(function (prop) {\n\t        return allowedProperties.indexOf(prop) === -1;\n\t      });\n\t      if (extraProps.length) {\n\t        throw formlyUsability.getFieldError(\"you-have-specified-field-properties-that-are-not-allowed\", \"You have specified field properties that are not allowed: \" + JSON.stringify(extraProps.join(\", \")), options);\n\t      }\n\t\n\t      function getTemplateOptionsCount(options) {\n\t        var templateOptions = 0;\n\t        templateOptions += angular.isDefined(options.template) ? 1 : 0;\n\t        templateOptions += angular.isDefined(options.type) ? 1 : 0;\n\t        templateOptions += angular.isDefined(options.templateUrl) ? 1 : 0;\n\t        return templateOptions;\n\t      }\n\t    }\n\t  }\n\t  formlyField.$inject = [\"$http\", \"$q\", \"$compile\", \"$templateCache\", \"formlyConfig\", \"formlyValidationMessages\", \"formlyUtil\", \"formlyUsability\", \"formlyWarn\"];\n\t\n\t  function arrayify(obj) {\n\t    if (obj && !angular.isArray(obj)) {\n\t      obj = [obj];\n\t    } else if (!obj) {\n\t      obj = [];\n\t    }\n\t    return obj;\n\t  }\n\t};\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyFocus\", [\"$timeout\", \"$document\", function ($timeout, $document) {\n\t    /* jshint -W052 */\n\t    return {\n\t      link: function (scope, element, attrs) {\n\t        var previousEl = null;\n\t        var el = element[0];\n\t        var doc = $document[0];\n\t        attrs.$observe(\"formlyFocus\", function (value) {\n\t          if (value === \"true\") {\n\t            $timeout(function () {\n\t              previousEl = doc.activeElement;\n\t              el.focus();\n\t            }, ~ ~attrs.focusWait);\n\t          } else if (value === \"false\") {\n\t            if (doc.activeElement === el) {\n\t              el.blur();\n\t              if (attrs.hasOwnProperty(\"refocus\") && previousEl) {\n\t                previousEl.focus();\n\t              }\n\t            }\n\t          }\n\t        });\n\t      }\n\t    };\n\t  }]);\n\t};\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _toArray = function (arr) { return Array.isArray(arr) ? arr : Array.from(arr); };\n\t\n\tvar _slice = Array.prototype.slice;\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyForm\", formlyForm);\n\t\n\t  formlyForm.tests = false ? require(\"./formly-form.test\")(ngModule) : null;\n\t\n\t  function formlyForm(formlyUsability) {\n\t    var currentFormId = 1;\n\t    return {\n\t      restrict: \"E\",\n\t      template: function (el, attrs) {\n\t        /* jshint -W033 */ // this because jshint is broken I guess...\n\t        var rootEl = attrs.rootEl || \"ng-form\";\n\t        return \"\\n          <\" + rootEl + \" class=\\\"formly\\\"\\n                   name=\\\"form\\\"\\n                   role=\\\"form\\\">\\n            <div formly-field\\n                 ng-repeat=\\\"field in fields track by $index\\\"\\n                 ng-if=\\\"!field.hide\\\"\\n                 class=\\\"formly-field {{field.type ? 'formly-field-' + field.type : ''}}\\\"\\n                 options=\\\"field\\\"\\n                 model=\\\"field.model || model\\\"\\n                 fields=\\\"fields\\\"\\n                 form=\\\"form\\\"\\n                 form-id=\\\"formId\\\"\\n                 index=\\\"$index\\\">\\n            </div>\\n            <div ng-transclude></div>\\n          </\" + rootEl + \">\\n        \";\n\t      },\n\t      replace: true,\n\t      transclude: true,\n\t      scope: {\n\t        fields: \"=\",\n\t        model: \"=?\", // we'll do our own warning to help with migrations\n\t        form: \"=?\"\n\t      },\n\t      controller: [\"$scope\", function ($scope) {\n\t        $scope.formId = \"formly_\" + currentFormId++;\n\t\n\t        angular.forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n\t        angular.forEach($scope.fields, setupWatchers); // setup watchers for all fields\n\t\n\t        // watch the model and evaluate watch expressions that depend on it.\n\t        $scope.$watch(\"model\", function onResultUpdate(newResult) {\n\t          angular.forEach($scope.fields, function (field) {\n\t            /*jshint -W030 */\n\t            field.runExpressions && field.runExpressions(newResult);\n\t          });\n\t        }, true);\n\t\n\t        function attachKey(field, index) {\n\t          field.key = field.key || index || 0;\n\t        }\n\t\n\t        function setupWatchers(field, index) {\n\t          if (!angular.isDefined(field.watcher)) {\n\t            return;\n\t          }\n\t          var watchers = field.watcher;\n\t          if (!angular.isArray(watchers)) {\n\t            watchers = [watchers];\n\t          }\n\t          angular.forEach(watchers, function (watcher) {\n\t            if (!angular.isDefined(watcher.listener)) {\n\t              throw formlyUsability.getFieldError(\"all-field-watchers-must-have-a-listener\", \"All field watchers must have a listener\", field);\n\t            }\n\t            var watchExpression = getWatchExpression(watcher, field, index);\n\t            var watchListener = getWatchListener(watcher, field, index);\n\t\n\t            var type = watcher.type || \"$watch\";\n\t            watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n\t          });\n\t        }\n\t\n\t        function getWatchExpression(watcher, field, index) {\n\t          var watchExpression = watcher.expression || \"model['\" + field.key + \"']\";\n\t          if (angular.isFunction(watchExpression)) {\n\t            // wrap the field's watch expression so we can call it with the field as the first arg\n\t            // and the stop function as the last arg as a helper\n\t            var originalExpression = watchExpression;\n\t            watchExpression = function formlyWatchExpression() {\n\t              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t              return originalExpression.apply(undefined, _toArray(args));\n\t            };\n\t            watchExpression.displayName = \"Formly Watch Expression for field for \" + field.key;\n\t          }\n\t          return watchExpression;\n\t        }\n\t\n\t        function getWatchListener(watcher, field, index) {\n\t          var watchListener = watcher.listener;\n\t          if (angular.isFunction(watchListener)) {\n\t            // wrap the field's watch listener so we can call it with the field as the first arg\n\t            // and the stop function as the last arg as a helper\n\t            var originalListener = watchListener;\n\t            watchListener = function formlyWatchListener() {\n\t              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t              return originalListener.apply(undefined, _toArray(args));\n\t            };\n\t            watchListener.displayName = \"Formly Watch Listener for field for \" + field.key;\n\t          }\n\t          return watchListener;\n\t        }\n\t\n\t        function modifyArgs(watcher, index) {\n\t          for (var _len = arguments.length, originalArgs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n\t            originalArgs[_key - 2] = arguments[_key];\n\t          }\n\t\n\t          return [$scope.fields[index]].concat(_toArray(originalArgs), [watcher.stopWatching]);\n\t        }\n\t      }],\n\t      link: function (scope, el, attrs) {\n\t        if (attrs.hasOwnProperty(\"result\")) {\n\t          throw formlyUsability.getFormlyError(\"The \\\"result\\\" attribute on a formly-form is no longer valid. Use \\\"model\\\" instead\");\n\t        }\n\t        if (attrs.name !== \"form\") {\n\t          // then they specified their own name\n\t          throw formlyUsability.getFormlyError(\"The \\\"name\\\" attribute on a formly-form is no longer valid. Use \\\"form\\\" instead\");\n\t        }\n\t        // enforce the model attribute because we're making it optional to help with migrations\n\t        if (!attrs.hasOwnProperty(\"model\") || !scope.model) {\n\t          throw formlyUsability.getFormlyError(\"The \\\"model\\\" attribute is required on a formly-form.\");\n\t        }\n\t      }\n\t    };\n\t  }\n\t  formlyForm.$inject = [\"formlyUsability\"];\n\t};\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(2)(ngModule);\n\t  __webpack_require__(3)(ngModule);\n\t  __webpack_require__(5)(ngModule);\n\t  __webpack_require__(4)(ngModule);\n\t};\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar ngModuleName = \"formly\";\n\tvar angular = __webpack_require__(1);\n\tvar ngModule = angular.module(ngModuleName, []);\n\t\n\t__webpack_require__(13)(ngModule);\n\t__webpack_require__(18)(ngModule);\n\t__webpack_require__(6)(ngModule);\n\t__webpack_require__(15)(ngModule);\n\t\n\tmodule.exports = ngModuleName;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.provider(\"formlyConfig\", formlyConfig);\n\t\n\t  formlyConfig.tests = false ? require(\"./formlyConfig.test\")(ngModule) : null;\n\t\n\t  function formlyConfig(formlyUsabilityProvider) {\n\t    var _this2 = this;\n\t\n\t\n\t    var typeMap = {};\n\t    var templateWrappersMap = {};\n\t    var defaultWrapperName = \"default\";\n\t    var _this = this;\n\t    var getError = formlyUsabilityProvider.getFormlyError;\n\t\n\t    angular.extend(this, {\n\t      setType: setType,\n\t      getType: getType,\n\t      setWrapper: setWrapper,\n\t      getWrapper: getWrapper,\n\t      getWrapperByType: getWrapperByType,\n\t      removeWrapperByName: removeWrapperByName,\n\t      removeWrappersForType: removeWrappersForType,\n\t      disableWarnings: false,\n\t      extras: {\n\t        disableNgModelAttrsManipulator: false\n\t      },\n\t      templateManipulators: {\n\t        preWrapper: [],\n\t        postWrapper: []\n\t      },\n\t      $get: function () {\n\t        return _this2;\n\t      }\n\t    });\n\t\n\t    function setType(options) {\n\t      if (angular.isArray(options)) {\n\t        angular.forEach(options, setType);\n\t      } else if (angular.isObject(options)) {\n\t        checkType(options);\n\t        typeMap[options.name] = options;\n\t      } else {\n\t        throw getError(\"You must provide an object or array for setType. You provided: \" + JSON.stringify(arguments));\n\t      }\n\t    }\n\t\n\t    function getType(name, throwError, errorContext) {\n\t      if (!name) {\n\t        return undefined;\n\t      }\n\t      var type = typeMap[name];\n\t      if (!type && throwError === true) {\n\t        throw getError(\"There is no type by the name of \\\"\" + name + \"\\\": \" + JSON.stringify(errorContext));\n\t      } else {\n\t        return type;\n\t      }\n\t    }\n\t\n\t    function checkType(options) {\n\t      if (!options.name) {\n\t        throw getError(\"You must provide a name for setType. You provided: \" + JSON.stringify(arguments));\n\t      } else if (!options.defaultOptions && !options.template && !options.templateUrl) {\n\t        throw getError(\"You must provide defaultOptions OR a template OR templateUrl for setType. \" + (\"You provided none of these: \" + JSON.stringify(arguments)));\n\t      } else if (options.template && options.templateUrl) {\n\t        throw getError(\"You must provide at most a template OR templateUrl for setType. \" + (\"You provided both: \" + JSON.stringify(arguments)));\n\t      }\n\t      if (!options.overwriteOk) {\n\t        checkOverwrite(options.name, typeMap, options, \"types\");\n\t      } else {\n\t        delete options.overwriteOk;\n\t      }\n\t    }\n\t\n\t    function setWrapper(options, name) {\n\t      if (angular.isArray(options)) {\n\t        return options.map(function (wrapperOptions) {\n\t          return setWrapper(wrapperOptions);\n\t        });\n\t      } else if (angular.isObject(options)) {\n\t        options.types = getOptionsTypes(options);\n\t        options.name = getOptionsName(options, name);\n\t        checkWrapperAPI(options);\n\t        templateWrappersMap[options.name] = options;\n\t        return options;\n\t      } else if (angular.isString(options)) {\n\t        return setWrapper({\n\t          template: options,\n\t          name: name\n\t        });\n\t      }\n\t    }\n\t\n\t    function getOptionsTypes(options) {\n\t      if (angular.isString(options.types)) {\n\t        return [options.types];\n\t      }\n\t      if (!angular.isDefined(options.types)) {\n\t        return [];\n\t      } else {\n\t        return options.types;\n\t      }\n\t    }\n\t\n\t    function getOptionsName(options, name) {\n\t      return options.name || name || options.types.join(\" \") || defaultWrapperName;\n\t    }\n\t\n\t    function checkWrapperAPI(options) {\n\t      formlyUsabilityProvider.checkWrapper(options);\n\t      if (options.template) {\n\t        formlyUsabilityProvider.checkWrapperTemplate(options.template, options);\n\t      }\n\t      if (!options.overwriteOk) {\n\t        checkOverwrite(options.name, templateWrappersMap, options, \"templateWrappers\");\n\t      } else {\n\t        delete options.overwriteOk;\n\t      }\n\t      checkWrapperTypes(options);\n\t    }\n\t\n\t    function checkWrapperTypes(options) {\n\t      var shouldThrow = !angular.isArray(options.types) || !options.types.every(angular.isString);\n\t      if (shouldThrow) {\n\t        throw getError(\"Attempted to create a template wrapper with types that is not a string or an array of strings\");\n\t      }\n\t    }\n\t\n\t    function checkOverwrite(property, object, newValue, objectName) {\n\t      if (object.hasOwnProperty(property)) {\n\t        warn([\"Attempting to overwrite \" + property + \" on \" + objectName + \" which is currently\", \"\" + JSON.stringify(object[property]) + \" with \" + JSON.stringify(newValue), \"To supress this warning, specify the property \\\"overwriteOk: true\\\"\"].join(\" \"));\n\t      }\n\t    }\n\t\n\t    function getWrapper(name) {\n\t      return templateWrappersMap[name || defaultWrapperName];\n\t    }\n\t\n\t    function getWrapperByType(type) {\n\t      /* jshint maxcomplexity:6 */\n\t      var wrappers = [];\n\t      for (var name in templateWrappersMap) {\n\t        if (templateWrappersMap.hasOwnProperty(name)) {\n\t          if (templateWrappersMap[name].types && templateWrappersMap[name].types.indexOf(type) !== -1) {\n\t            wrappers.push(templateWrappersMap[name]);\n\t          }\n\t        }\n\t      }\n\t      return wrappers;\n\t    }\n\t\n\t    function removeWrapperByName(name) {\n\t      var wrapper = templateWrappersMap[name];\n\t      delete templateWrappersMap[name];\n\t      return wrapper;\n\t    }\n\t\n\t    function removeWrappersForType(type) {\n\t      var wrappers = getWrapperByType(type);\n\t      if (!wrappers) {\n\t        return;\n\t      }\n\t      if (!angular.isArray(wrappers)) {\n\t        return removeWrapperByName(wrappers.name);\n\t      } else {\n\t        wrappers.forEach(function (wrapper) {\n\t          return removeWrapperByName(wrapper.name);\n\t        });\n\t        return wrappers;\n\t      }\n\t    }\n\t\n\t\n\t    function warn() {\n\t      if (!_this.disableWarnings) {\n\t        console.warn.apply(console, arguments);\n\t      }\n\t    }\n\t  }\n\t  formlyConfig.$inject = [\"formlyUsabilityProvider\"];\n\t\n\t\n\t};\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.constant(\"formlyErrorAndWarningsUrlPrefix\", \"https://github.com/formly-js/angular-formly/wiki/Errors-and-Warnings#\");\n\t};\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.provider(\"formlyUsability\", function () {\n\t    var _this = this;\n\t    var errorsAndWarningsUrlPrefix = \"https://github.com/formly-js/angular-formly/wiki/Errors-and-Warnings#\";\n\t    angular.extend(this, {\n\t      getFormlyError: getFormlyError,\n\t      getFieldError: getFieldError,\n\t      checkWrapper: checkWrapper,\n\t      checkWrapperTemplate: checkWrapperTemplate,\n\t      $get: function () {\n\t        return _this;\n\t      }\n\t    });\n\t\n\t    function getFieldError(errorInfoSlug, message, field) {\n\t      if (arguments.length < 3) {\n\t        field = message;\n\t        message = errorInfoSlug;\n\t        errorInfoSlug = null;\n\t      }\n\t      return new Error(getErrorMessage(errorInfoSlug, message) + (\" Field definition: \" + angular.toJson(field)));\n\t    }\n\t\n\t    function getFormlyError(errorInfoSlug, message) {\n\t      if (!message) {\n\t        message = errorInfoSlug;\n\t        errorInfoSlug = null;\n\t      }\n\t      return new Error(getErrorMessage(errorInfoSlug, message));\n\t    }\n\t\n\t    function getErrorMessage(errorInfoSlug, message) {\n\t      var url = \"\";\n\t      if (errorInfoSlug !== null) {\n\t        url = \"\" + errorsAndWarningsUrlPrefix + \"\" + errorInfoSlug;\n\t      }\n\t      return \"Formly Error: \" + message + \". \" + url;\n\t    }\n\t\n\t    function checkWrapper(wrapper) {\n\t      if (wrapper.template && wrapper.templateUrl) {\n\t        throw getFormlyError(\"Template wrappers can only have a templateUrl or a template. \" + (\"This one provided both: \" + JSON.stringify(wrapper)));\n\t      }\n\t      if (!wrapper.template && !wrapper.templateUrl) {\n\t        throw getFormlyError(\"Template wrappers must have one of a templateUrl or a template. \" + (\"This one provided neither: \" + JSON.stringify(wrapper)));\n\t      }\n\t    }\n\t\n\t    function checkWrapperTemplate(template, additionalInfo) {\n\t      var formlyTransclude = \"<formly-transclude></formly-transclude>\";\n\t      if (template.indexOf(formlyTransclude) === -1) {\n\t        throw getFormlyError(\"Template wrapper templates must use \\\"\" + formlyTransclude + \"\\\" somewhere in them. \" + (\"This one does not have \\\"<formly-transclude></formly-transclude>\\\" in it: \" + template) + \"\\n\" + (\"Additional information: \" + JSON.stringify(additionalInfo)));\n\t      }\n\t    }\n\t  });\n\t};\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.factory(\"formlyValidationMessages\", function () {\n\t    var formlyValidationMessages = {\n\t      addTemplateOptionValueMessage: addTemplateOptionValueMessage,\n\t      addStringMessage: addStringMessage,\n\t      messages: {}\n\t    };\n\t\n\t    return formlyValidationMessages;\n\t\n\t    function addTemplateOptionValueMessage(name, prop, prefix, suffix, alternate) {\n\t      formlyValidationMessages.messages[name] = templateOptionValue(prop, prefix, suffix, alternate);\n\t    }\n\t\n\t    function addStringMessage(name, string) {\n\t      formlyValidationMessages.messages[name] = function () {\n\t        return string;\n\t      };\n\t    }\n\t\n\t\n\t    function templateOptionValue(prop, prefix, suffix, alternate) {\n\t      return function getValidationMessage(viewValue, modelValue, scope) {\n\t        if (scope.options.templateOptions[prop]) {\n\t          return \"\" + prefix + \" \" + scope.options.templateOptions[prop] + \" \" + suffix;\n\t        } else {\n\t          return alternate;\n\t        }\n\t      };\n\t    }\n\t  });\n\t};\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.constant(\"formlyVersion\", (\"3.1.6\"));\n\t};\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(10)(ngModule);\n\t  __webpack_require__(8)(ngModule);\n\t  __webpack_require__(12)(ngModule);\n\t  __webpack_require__(9)(ngModule);\n\t  __webpack_require__(11)(ngModule);\n\t};\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.run(addFormlyNgModelAttrsManipulator);\n\t\n\t  function addFormlyNgModelAttrsManipulator(formlyConfig) {\n\t    if (formlyConfig.extras.disableNgModelAttrsManipulator) {\n\t      return;\n\t    }\n\t    formlyConfig.templateManipulators.preWrapper.push(ngModelAttrsManipulator);\n\t  }\n\t  addFormlyNgModelAttrsManipulator.$inject = [\"formlyConfig\"];\n\t\n\t\n\t  function ngModelAttrsManipulator(template, options, scope) {\n\t    /* jshint maxcomplexity:7 */\n\t    var el = angular.element(\"<a></a>\");\n\t    var data = options.data;\n\t    if (data.noTouchy) {\n\t      return template;\n\t    }\n\t    el.append(template);\n\t    var modelEls = angular.element(el[0].querySelectorAll(\"[ng-model]\"));\n\t    if (!modelEls || !modelEls.length) {\n\t      return template;\n\t    }\n\t\n\t    addIfNotPresent(modelEls, \"id\", scope.id);\n\t    addIfNotPresent(modelEls, \"name\", scope.id);\n\t\n\t    if (angular.isDefined(options.validators)) {\n\t      addIfNotPresent(modelEls, \"formly-custom-validation\", \"options.validators\");\n\t    }\n\t    if (angular.isDefined(options.modelOptions)) {\n\t      addIfNotPresent(modelEls, \"ng-model-options\", \"options.modelOptions\");\n\t      if (options.modelOptions.getterSetter) {\n\t        modelEls.attr(\"ng-model\", \"options.value\");\n\t      }\n\t    }\n\t    addTemplateOptionsAttrs();\n\t\n\t    return el.html();\n\t\n\t\n\t    function addTemplateOptionsAttrs() {\n\t      if (!options.templateOptions && !options.expressionProperties) {\n\t        // no need to run these if there are no templateOptions or expressionProperties\n\t        return;\n\t      }\n\t      var to = options.templateOptions || {};\n\t      var ep = options.expressionProperties || {};\n\t\n\t      var ngModelAttributes = getBuiltinAttributes();\n\t\n\t      // extend with the user's specifications winning\n\t      angular.extend(ngModelAttributes, options.ngModelAttrs);\n\t\n\t      angular.forEach(ngModelAttributes, function (val, name) {\n\t        /* jshint maxcomplexity:9 */\n\t        var attrVal = undefined;\n\t        var attrName = undefined;\n\t        var ref = \"options.templateOptions['\" + name + \"']\";\n\t        var toVal = to[name];\n\t        var epVal = getEpValue(ep, name);\n\t\n\t        var inTo = angular.isDefined(toVal);\n\t        var inEp = angular.isDefined(epVal);\n\t        if (val.value) {\n\t          // I realize this looks backwards, but it's right, trust me...\n\t          attrName = val.value;\n\t          attrVal = name;\n\t        } else if (val.expression && inTo) {\n\t          attrName = val.expression;\n\t          if (angular.isString(to[name])) {\n\t            attrVal = \"$eval(\" + ref + \")\";\n\t          } else if (angular.isFunction(to[name])) {\n\t            attrVal = \"\" + ref + \"(model[options.key], options, this, $event)\";\n\t          } else {\n\t            throw new Error(\"options.templateOptions.\" + name + \" must be a string or function: \" + JSON.stringify(options));\n\t          }\n\t        } else if (val.bound && inEp) {\n\t          attrName = val.bound;\n\t          attrVal = ref;\n\t        } else if (val.attribute && inEp) {\n\t          attrName = val.attribute;\n\t          attrVal = \"{{\" + ref + \"}}\";\n\t        } else if (val.attribute && inTo) {\n\t          attrName = val.attribute;\n\t          attrVal = toVal;\n\t        }\n\t        if (angular.isDefined(attrName) && angular.isDefined(attrVal)) {\n\t          addIfNotPresent(modelEls, attrName, attrVal);\n\t        }\n\t      });\n\t    }\n\t\n\t    function getBuiltinAttributes() {\n\t      var ngModelAttributes = {\n\t        focus: {\n\t          attribute: \"formly-focus\"\n\t        }\n\t      };\n\t      var bothAttributeAndBound = [\"required\", \"disabled\", \"pattern\", \"maxlength\", \"minlength\"];\n\t      var expressionOnly = [\"change\", \"keydown\", \"keyup\", \"keypress\", \"click\", \"focus\", \"blur\"];\n\t      var attributeOnly = [\"placeholder\", \"min\", \"max\", \"tabindex\", \"type\"];\n\t\n\t      angular.forEach(bothAttributeAndBound, function (item) {\n\t        ngModelAttributes[item] = { attribute: item, bound: \"ng-\" + item };\n\t      });\n\t\n\t      angular.forEach(expressionOnly, function (item) {\n\t        var propName = \"on\" + item.substr(0, 1).toUpperCase() + item.substr(1);\n\t        ngModelAttributes[propName] = { expression: \"ng-\" + item };\n\t      });\n\t\n\t      angular.forEach(attributeOnly, function (item) {\n\t        ngModelAttributes[item] = { attribute: item };\n\t      });\n\t      return ngModelAttributes;\n\t    }\n\t\n\t    function getEpValue(ep, name) {\n\t      return ep[\"templateOptions.\" + name] || ep[\"templateOptions['\" + name + \"']\"] || ep[\"templateOptions[\\\"\" + name + \"\\\"]\"];\n\t    }\n\t\n\t    function addIfNotPresent(el, attr, val) {\n\t      if (!el.attr(attr)) {\n\t        el.attr(attr, val);\n\t      }\n\t    }\n\t  }\n\t};\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(14)(ngModule);\n\t};\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.factory(\"formlyUtil\", formlyUtil);\n\t\n\t  formlyUtil.tests = false ? require(\"./formlyUtil.test\")(ngModule) : null;\n\t\n\t  function formlyUtil() {\n\t    return {\n\t      formlyEval: formlyEval,\n\t      getFieldId: getFieldId,\n\t      reverseDeepMerge: reverseDeepMerge\n\t    };\n\t\n\t    function formlyEval(scope, expression, modelValue, viewValue) {\n\t      if (angular.isFunction(expression)) {\n\t        return expression(viewValue || modelValue, modelValue, scope);\n\t      } else {\n\t        return scope.$eval(expression, {\n\t          $viewValue: viewValue || modelValue,\n\t          $modelValue: modelValue\n\t        });\n\t      }\n\t    }\n\t\n\t    function getFieldId(formId, options, index) {\n\t      var type = options.type;\n\t      if (!type && options.template) {\n\t        type = \"template\";\n\t      } else if (!type && options.templateUrl) {\n\t        type = \"templateUrl\";\n\t      }\n\t\n\t      return [formId, type, options.key, index].join(\"_\");\n\t    }\n\t\n\t    function reverseDeepMerge(dest) {\n\t      angular.forEach(arguments, function (src, index) {\n\t        if (!index) {\n\t          return;\n\t        }\n\t        angular.forEach(src, function (val, prop) {\n\t          if (!angular.isDefined(dest[prop])) {\n\t            dest[prop] = angular.copy(val);\n\t          } else if (objAndSameType(dest[prop], val)) {\n\t            reverseDeepMerge(dest[prop], val);\n\t          }\n\t        });\n\t      });\n\t    }\n\t\n\t    function objAndSameType(obj1, obj2) {\n\t      return angular.isObject(obj1) && angular.isObject(obj2) && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2);\n\t    }\n\t  }\n\t};\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _toArray = function (arr) { return Array.isArray(arr) ? arr : Array.from(arr); };\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.factory(\"formlyWarn\", [\"formlyConfig\", \"formlyErrorAndWarningsUrlPrefix\", \"$log\", function (formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n\t    return function warn() {\n\t      if (!formlyConfig.disableWarnings) {\n\t        var args = Array.prototype.slice.call(arguments);\n\t        var warnInfoSlug = args.shift();\n\t        args.unshift(\"Formly Warning:\");\n\t        args.push(\"\" + formlyErrorAndWarningsUrlPrefix + \"\" + warnInfoSlug);\n\t        $log.warn.apply($log, _toArray(args));\n\t      }\n\t    };\n\t  }]);\n\t};\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(16)(ngModule);\n\t  __webpack_require__(17)(ngModule);\n\t};\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_19__;\n\n/***/ }\n/******/ ])\n});\n\n\n\n/** WEBPACK FOOTER **\n ** formly.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap dd7583dd9d5941c1ad08\n **/","\"use strict\";\n\nmodule.exports = require(\"./index.common\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.js\n ** module id = 0\n ** module chunks = 0\n **/","\"use strict\";\n\n// some versions of angular don't export the angular module properly,\n// so we get it from window in this case.\nvar angular = require(\"angular\");\nif (!angular.version) {\n  angular = window.angular;\n}\nmodule.exports = angular;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./angular-fix/index.js\n ** module id = 1\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.directive(\"formlyCustomValidation\", formlyCustomValidation);\n\n  formlyCustomValidation.tests = ON_TEST ? require(\"./formly-custom-validation.test\")(ngModule) : null;\n\n  function formlyCustomValidation(formlyUtil, $q) {\n    return {\n      require: \"ngModel\",\n      link: function (scope, el, attrs, ctrl) {\n        var validators = scope.$eval(attrs.formlyCustomValidation);\n        if (!validators) {\n          return;\n        }\n        checkValidators(validators);\n        scope.options.validation.messages = scope.options.validation.messages || {};\n\n\n        var useNewValidatorsApi = ctrl.hasOwnProperty(\"$validators\") && !attrs.hasOwnProperty(\"useParsers\");\n        angular.forEach(validators, function (validator, name) {\n          var message = validator.message;\n          if (message) {\n            scope.options.validation.messages[name] = function () {\n              return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n            };\n          }\n          validator = angular.isObject(validator) ? validator.expression : validator;\n          var isPossiblyAsync = !angular.isString(validator);\n          if (useNewValidatorsApi) {\n            setupWithValidators();\n          } else {\n            setupWithParsers();\n          }\n\n          function setupWithValidators() {\n            var validatorCollection = isPossiblyAsync ? \"$asyncValidators\" : \"$validators\";\n            ctrl[validatorCollection][name] = function (modelValue, viewValue) {\n              var value = formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n              if (isPossiblyAsync) {\n                return isPromiseLike(value) ? value : value ? $q.when(value) : $q.reject(value);\n              } else {\n                return value;\n              }\n            };\n          }\n\n          function setupWithParsers() {\n            var inFlightValidator = undefined;\n            ctrl.$parsers.unshift(function (viewValue) {\n              var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n              if (isPromiseLike(isValid)) {\n                ctrl.$pending = ctrl.$pending || {};\n                ctrl.$pending[name] = true;\n                inFlightValidator = isValid;\n                isValid.then(function () {\n                  if (inFlightValidator === isValid) {\n                    ctrl.$setValidity(name, true);\n                  }\n                })[\"catch\"](function () {\n                  if (inFlightValidator === isValid) {\n                    ctrl.$setValidity(name, false);\n                  }\n                })[\"finally\"](function () {\n                  if (Object.keys(ctrl.$pending).length === 1) {\n                    delete ctrl.$pending;\n                  } else {\n                    delete ctrl.$pending[name];\n                  }\n                });\n              } else {\n                ctrl.$setValidity(name, isValid);\n              }\n              return viewValue;\n            });\n          }\n        });\n      }\n    };\n\n    function isPromiseLike(obj) {\n      return obj && angular.isFunction(obj.then);\n    }\n\n    function checkValidators(validators) {\n      var allowedProperties = [\"expression\", \"message\"];\n      var validatorsWithExtraProps = {};\n      angular.forEach(validators, function (validator, name) {\n        if (angular.isString(validator)) {\n          return;\n        }\n        var extraProps = [];\n        angular.forEach(validator, function (v, key) {\n          if (allowedProperties.indexOf(key) === -1) {\n            extraProps.push(key);\n          }\n        });\n        if (extraProps.length) {\n          validatorsWithExtraProps[name] = extraProps;\n        }\n      });\n      if (Object.keys(validatorsWithExtraProps).length) {\n        throw new Error([\"Validators are only allowed to be functions or objects that have \" + allowedProperties.join(\", \") + \".\", \"You provided some extra properties: \" + JSON.stringify(validatorsWithExtraProps)].join(\" \"));\n      }\n    }\n  }\n  formlyCustomValidation.$inject = [\"formlyUtil\", \"$q\"];\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/formly-custom-validation.js\n ** module id = 2\n ** module chunks = 0\n **/","\"use strict\";\n\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  ngModule.directive(\"formlyField\", formlyField);\n\n  formlyField.tests = ON_TEST ? require(\"./formly-field.test\")(ngModule) : null;\n\n  function formlyField($http, $q, $compile, $templateCache, formlyConfig, formlyValidationMessages, formlyUtil, formlyUsability, formlyWarn) {\n    return {\n      restrict: \"AE\",\n      transclude: true,\n      scope: {\n        options: \"=\",\n        model: \"=\",\n        formId: \"=?\",\n        index: \"=?\",\n        fields: \"=?\",\n        form: \"=?\"\n      },\n      controller: [\"$scope\", \"$timeout\", \"$parse\", \"$controller\", function fieldController($scope, $timeout, $parse, $controller) {\n        var opts = $scope.options;\n        var fieldType = opts.type && formlyConfig.getType(opts.type);\n        simplifyLife(opts);\n        mergeFieldOptionsWithTypeDefaults(opts, fieldType);\n        apiCheck(opts);\n        // set field id to link labels and fields\n        $scope.id = formlyUtil.getFieldId($scope.formId, opts, $scope.index);\n\n        // initalization\n        extendOptionsWithDefaults(opts, $scope.index);\n        runExpressions();\n        setFormControl($scope, opts);\n        addModelWatcher($scope, opts);\n        addShowMessagesWatcher($scope, opts);\n        addValidationMessages(opts);\n        invokeControllers($scope, opts, fieldType);\n        // simplify things\n        // create $scope.to so template authors can reference to instead of $scope.options.templateOptions\n        $scope.to = $scope.options.templateOptions;\n\n        // function definitions\n        function runExpressions() {\n          $timeout(function () {\n            // must run on next tick to make sure that the current value is correct.\n            var field = $scope.options;\n            var currentValue = valueGetterSetter();\n            angular.forEach(field.expressionProperties, function runExpression(expression, prop) {\n              var setter = $parse(prop).assign;\n              var promise = $q.when(formlyUtil.formlyEval($scope, expression, currentValue));\n              promise.then(function (value) {\n                setter(field, value);\n              });\n            });\n          });\n        }\n\n        function valueGetterSetter(newVal) {\n          if (!$scope.model || !$scope.options.key) {\n            return;\n          }\n          if (angular.isDefined(newVal)) {\n            $scope.model[$scope.options.key] = newVal;\n          }\n          return $scope.model[$scope.options.key];\n        }\n\n        function simplifyLife(options) {\n          // add a few empty objects (if they don't already exist) so you don't have to undefined check everywhere\n          formlyUtil.reverseDeepMerge(options, {\n            data: {},\n            templateOptions: {},\n            validation: {}\n          });\n        }\n\n        function mergeFieldOptionsWithTypeDefaults(options, type) {\n          if (type) {\n            mergeOptions(options, type.defaultOptions);\n          }\n          var properOrder = arrayify(options.optionsTypes).reverse(); // so the right things are overridden\n          angular.forEach(properOrder, function (typeName) {\n            mergeOptions(options, formlyConfig.getType(typeName, true, options).defaultOptions);\n          });\n        }\n\n        function mergeOptions(options, extraOptions) {\n          if (extraOptions) {\n            if (angular.isFunction(extraOptions)) {\n              extraOptions = extraOptions(options);\n            }\n            formlyUtil.reverseDeepMerge(options, extraOptions);\n          }\n        }\n\n        function extendOptionsWithDefaults(options, index) {\n          angular.extend(options, {\n            // attach the key in case the formly-field directive is used directly\n            key: options.key || index || 0,\n            value: valueGetterSetter,\n            runExpressions: runExpressions\n          });\n        }\n\n        // initialization functions\n        function setFormControl(scope, options) {\n          if (options.noFormControl) {\n            return;\n          }\n          var stopWaitingForDestroy;\n          var maxTime = 2000;\n          var intervalTime = 5;\n          var iterations = 0;\n          var interval = setInterval(function () {\n            iterations++;\n            if (!angular.isDefined(options.key)) {\n              return cleanUp();\n            }\n            var formControl = scope.form && scope.form[scope.id];\n            if (formControl) {\n              options.formControl = formControl;\n              cleanUp();\n            } else if (intervalTime * iterations > maxTime) {\n              formlyWarn(\"couldnt-set-the-formcontrol-after-timems\", \"Couldn't set the formControl after \" + maxTime + \"ms\", scope);\n              cleanUp();\n            }\n          }, intervalTime);\n          stopWaitingForDestroy = scope.$on(\"$destroy\", cleanUp);\n\n          function cleanUp() {\n            stopWaitingForDestroy();\n            clearInterval(interval);\n          }\n        }\n\n        function addModelWatcher(scope, options) {\n          if (options.model) {\n            scope.$watch(\"options.model\", runExpressions, true);\n          }\n        }\n\n        function addShowMessagesWatcher(scope, options) {\n          var expression = \"options.formControl.$invalid && (options.formControl.$touched || options.validation.show)\";\n          scope.$watch(expression, function (show) {\n            options.validation.errorExistsAndShouldBeVisible = show;\n          });\n        }\n\n        function addValidationMessages(options) {\n          options.validation.messages = options.validation.messages || {};\n          angular.forEach(formlyValidationMessages.messages, function (expression, name) {\n            if (!options.validation.messages[name]) {\n              options.validation.messages[name] = function (viewValue, modelValue, scope) {\n                return formlyUtil.formlyEval(scope, expression, modelValue, viewValue);\n              };\n            }\n          });\n        }\n\n        function invokeControllers(scope) {\n          var options = arguments[1] === undefined ? {} : arguments[1];\n          var type = arguments[2] === undefined ? {} : arguments[2];\n          angular.forEach([type.controller, options.controller], function (controller) {\n            if (controller) {\n              $controller(controller, { $scope: scope });\n            }\n          });\n        }\n      }],\n      link: function fieldLink(scope, el) {\n        var type = scope.options.type && formlyConfig.getType(scope.options.type);\n        var args = arguments;\n        var thusly = this;\n        getFieldTemplate(scope.options).then(runManipulators(formlyConfig.templateManipulators.preWrapper)).then(transcludeInWrappers(scope.options)).then(runManipulators(formlyConfig.templateManipulators.postWrapper)).then(setElementTemplate)[\"catch\"](function (error) {\n          formlyWarn(\"there-was-a-problem-setting-the-template-for-this-field\", \"There was a problem setting the template for this field \", scope.options, error);\n        });\n\n        function setElementTemplate(templateEl) {\n          el.html(asHtml(templateEl));\n          $compile(el.contents())(scope);\n          if (type && type.link) {\n            type.link.apply(thusly, args);\n          }\n          if (scope.options.link) {\n            scope.options.link.apply(thusly, args);\n          }\n        }\n\n        function runManipulators(manipulators) {\n          return function runManipulatorsOnTemplate(template) {\n            var chain = $q.when(template);\n            angular.forEach(manipulators, function (manipulator) {\n              chain = chain.then(function (template) {\n                return $q.when(manipulator(template, scope.options, scope)).then(function (newTemplate) {\n                  return angular.isString(newTemplate) ? newTemplate : asHtml(newTemplate);\n                });\n              });\n            });\n            return chain;\n          };\n        }\n      }\n    };\n\n    function asHtml(el) {\n      var wrapper = angular.element(\"<a></a>\");\n      return wrapper.append(el).html();\n    }\n\n    function getFieldTemplate(options) {\n      var type = formlyConfig.getType(options.type, true, options);\n      var template = options.template || type && type.template;\n      var templateUrl = options.templateUrl || type && type.templateUrl;\n      if (!template && !templateUrl) {\n        throw formlyUsability.getFieldError(\"template-type-type-not-supported\", \"template type '\" + options.type + \"' not supported. On element:\", options);\n      }\n      return getTemplate(template || templateUrl, !template);\n    }\n\n\n    function getTemplate(template, isUrl) {\n      if (!isUrl) {\n        return $q.when(template);\n      } else {\n        var httpOptions = { cache: $templateCache };\n        return $http.get(template, httpOptions).then(function (response) {\n          return response.data;\n        })[\"catch\"](function (error) {\n          formlyWarn(\"problem-loading-template-for-templateurl\", \"Problem loading template for \" + template, error);\n        });\n      }\n    }\n\n    function transcludeInWrappers(options) {\n      var wrapper = getWrapperOption(options);\n\n      return function transcludeTemplate(template) {\n        if (!wrapper.length) {\n          return $q.when(template);\n        }\n\n        wrapper.forEach(formlyUsability.checkWrapper);\n        var promises = wrapper.map(function (w) {\n          return getTemplate(w.template || w.templateUrl, !w.template);\n        });\n        return $q.all(promises).then(function (wrappersTemplates) {\n          wrappersTemplates.forEach(function (wrapperTemplate, index) {\n            formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper[index]);\n          });\n          wrappersTemplates.reverse(); // wrapper 0 is wrapped in wrapper 1 and so on...\n          var totalWrapper = wrappersTemplates.shift();\n          wrappersTemplates.forEach(function (wrapperTemplate) {\n            totalWrapper = doTransclusion(totalWrapper, wrapperTemplate);\n          });\n          return doTransclusion(totalWrapper, template);\n        });\n      };\n    }\n\n    function doTransclusion(wrapper, template) {\n      var superWrapper = angular.element(\"<a></a>\"); // this allows people not have to have a single root in wrappers\n      superWrapper.append(wrapper);\n      var transcludeEl = superWrapper.find(\"formly-transclude\");\n      transcludeEl.replaceWith(template);\n      return superWrapper.html();\n    }\n\n    function getWrapperOption(options) {\n      var wrapper = options.wrapper;\n      // explicit null means no wrapper\n      if (wrapper === null) {\n        return [];\n      }\n\n      // nothing specified means use the default wrapper for the type\n      if (!wrapper) {\n        // get all wrappers that specify they apply to this type\n        wrapper = arrayify(formlyConfig.getWrapperByType(options.type));\n      } else {\n        wrapper = arrayify(wrapper).map(formlyConfig.getWrapper);\n      }\n\n      // get all wrappers for that this type specified that it uses.\n      var type = formlyConfig.getType(options.type, true, options);\n      if (type && type.wrapper) {\n        var typeWrappers = arrayify(type.wrapper).map(formlyConfig.getWrapper);\n        wrapper = wrapper.concat(typeWrappers);\n      }\n\n      // add the default wrapper last\n      var defaultWrapper = formlyConfig.getWrapper();\n      if (defaultWrapper) {\n        wrapper.push(defaultWrapper);\n      }\n      return wrapper;\n    }\n\n    function apiCheck(options) {\n      var templateOptions = getTemplateOptionsCount(options);\n      if (templateOptions === 0) {\n        throw formlyUsability.getFieldError(\"you-must-provide-one-of-type-template-or-templateurl-for-a-field\", \"You must provide one of type, template, or templateUrl for a field\", options);\n      } else if (templateOptions > 1) {\n        throw formlyUsability.getFieldError(\"you-must-only-provide-a-type-template-or-templateurl-for-a-field\", \"You must only provide a type, template, or templateUrl for a field\", options);\n      }\n\n      // check that only allowed properties are provided\n      var allowedProperties = [\"type\", \"template\", \"templateUrl\", \"key\", \"model\", \"expressionProperties\", \"data\", \"templateOptions\", \"wrapper\", \"modelOptions\", \"watcher\", \"validators\", \"noFormControl\", \"hide\", \"ngModelAttrs\", \"optionsTypes\", \"link\", \"controller\", \"validation\",\n      // things we add to the field after the fact are ok\n      \"formControl\", \"value\", \"runExpressions\"];\n      var extraProps = Object.keys(options).filter(function (prop) {\n        return allowedProperties.indexOf(prop) === -1;\n      });\n      if (extraProps.length) {\n        throw formlyUsability.getFieldError(\"you-have-specified-field-properties-that-are-not-allowed\", \"You have specified field properties that are not allowed: \" + JSON.stringify(extraProps.join(\", \")), options);\n      }\n\n      function getTemplateOptionsCount(options) {\n        var templateOptions = 0;\n        templateOptions += angular.isDefined(options.template) ? 1 : 0;\n        templateOptions += angular.isDefined(options.type) ? 1 : 0;\n        templateOptions += angular.isDefined(options.templateUrl) ? 1 : 0;\n        return templateOptions;\n      }\n    }\n  }\n  formlyField.$inject = [\"$http\", \"$q\", \"$compile\", \"$templateCache\", \"formlyConfig\", \"formlyValidationMessages\", \"formlyUtil\", \"formlyUsability\", \"formlyWarn\"];\n\n  function arrayify(obj) {\n    if (obj && !angular.isArray(obj)) {\n      obj = [obj];\n    } else if (!obj) {\n      obj = [];\n    }\n    return obj;\n  }\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/formly-field.js\n ** module id = 3\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.directive(\"formlyFocus\", [\"$timeout\", \"$document\", function ($timeout, $document) {\n    /* jshint -W052 */\n    return {\n      link: function (scope, element, attrs) {\n        var previousEl = null;\n        var el = element[0];\n        var doc = $document[0];\n        attrs.$observe(\"formlyFocus\", function (value) {\n          if (value === \"true\") {\n            $timeout(function () {\n              previousEl = doc.activeElement;\n              el.focus();\n            }, ~ ~attrs.focusWait);\n          } else if (value === \"false\") {\n            if (doc.activeElement === el) {\n              el.blur();\n              if (attrs.hasOwnProperty(\"refocus\") && previousEl) {\n                previousEl.focus();\n              }\n            }\n          }\n        });\n      }\n    };\n  }]);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/formly-focus.js\n ** module id = 4\n ** module chunks = 0\n **/","\"use strict\";\n\nvar _toArray = function (arr) { return Array.isArray(arr) ? arr : Array.from(arr); };\n\nvar _slice = Array.prototype.slice;\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  ngModule.directive(\"formlyForm\", formlyForm);\n\n  formlyForm.tests = ON_TEST ? require(\"./formly-form.test\")(ngModule) : null;\n\n  function formlyForm(formlyUsability) {\n    var currentFormId = 1;\n    return {\n      restrict: \"E\",\n      template: function (el, attrs) {\n        /* jshint -W033 */ // this because jshint is broken I guess...\n        var rootEl = attrs.rootEl || \"ng-form\";\n        return \"\\n          <\" + rootEl + \" class=\\\"formly\\\"\\n                   name=\\\"form\\\"\\n                   role=\\\"form\\\">\\n            <div formly-field\\n                 ng-repeat=\\\"field in fields track by $index\\\"\\n                 ng-if=\\\"!field.hide\\\"\\n                 class=\\\"formly-field {{field.type ? 'formly-field-' + field.type : ''}}\\\"\\n                 options=\\\"field\\\"\\n                 model=\\\"field.model || model\\\"\\n                 fields=\\\"fields\\\"\\n                 form=\\\"form\\\"\\n                 form-id=\\\"formId\\\"\\n                 index=\\\"$index\\\">\\n            </div>\\n            <div ng-transclude></div>\\n          </\" + rootEl + \">\\n        \";\n      },\n      replace: true,\n      transclude: true,\n      scope: {\n        fields: \"=\",\n        model: \"=?\", // we'll do our own warning to help with migrations\n        form: \"=?\"\n      },\n      controller: [\"$scope\", function ($scope) {\n        $scope.formId = \"formly_\" + currentFormId++;\n\n        angular.forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n        angular.forEach($scope.fields, setupWatchers); // setup watchers for all fields\n\n        // watch the model and evaluate watch expressions that depend on it.\n        $scope.$watch(\"model\", function onResultUpdate(newResult) {\n          angular.forEach($scope.fields, function (field) {\n            /*jshint -W030 */\n            field.runExpressions && field.runExpressions(newResult);\n          });\n        }, true);\n\n        function attachKey(field, index) {\n          field.key = field.key || index || 0;\n        }\n\n        function setupWatchers(field, index) {\n          if (!angular.isDefined(field.watcher)) {\n            return;\n          }\n          var watchers = field.watcher;\n          if (!angular.isArray(watchers)) {\n            watchers = [watchers];\n          }\n          angular.forEach(watchers, function (watcher) {\n            if (!angular.isDefined(watcher.listener)) {\n              throw formlyUsability.getFieldError(\"all-field-watchers-must-have-a-listener\", \"All field watchers must have a listener\", field);\n            }\n            var watchExpression = getWatchExpression(watcher, field, index);\n            var watchListener = getWatchListener(watcher, field, index);\n\n            var type = watcher.type || \"$watch\";\n            watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n          });\n        }\n\n        function getWatchExpression(watcher, field, index) {\n          var watchExpression = watcher.expression || \"model['\" + field.key + \"']\";\n          if (angular.isFunction(watchExpression)) {\n            // wrap the field's watch expression so we can call it with the field as the first arg\n            // and the stop function as the last arg as a helper\n            var originalExpression = watchExpression;\n            watchExpression = function formlyWatchExpression() {\n              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n              return originalExpression.apply(undefined, _toArray(args));\n            };\n            watchExpression.displayName = \"Formly Watch Expression for field for \" + field.key;\n          }\n          return watchExpression;\n        }\n\n        function getWatchListener(watcher, field, index) {\n          var watchListener = watcher.listener;\n          if (angular.isFunction(watchListener)) {\n            // wrap the field's watch listener so we can call it with the field as the first arg\n            // and the stop function as the last arg as a helper\n            var originalListener = watchListener;\n            watchListener = function formlyWatchListener() {\n              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n              return originalListener.apply(undefined, _toArray(args));\n            };\n            watchListener.displayName = \"Formly Watch Listener for field for \" + field.key;\n          }\n          return watchListener;\n        }\n\n        function modifyArgs(watcher, index) {\n          for (var _len = arguments.length, originalArgs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n            originalArgs[_key - 2] = arguments[_key];\n          }\n\n          return [$scope.fields[index]].concat(_toArray(originalArgs), [watcher.stopWatching]);\n        }\n      }],\n      link: function (scope, el, attrs) {\n        if (attrs.hasOwnProperty(\"result\")) {\n          throw formlyUsability.getFormlyError(\"The \\\"result\\\" attribute on a formly-form is no longer valid. Use \\\"model\\\" instead\");\n        }\n        if (attrs.name !== \"form\") {\n          // then they specified their own name\n          throw formlyUsability.getFormlyError(\"The \\\"name\\\" attribute on a formly-form is no longer valid. Use \\\"form\\\" instead\");\n        }\n        // enforce the model attribute because we're making it optional to help with migrations\n        if (!attrs.hasOwnProperty(\"model\") || !scope.model) {\n          throw formlyUsability.getFormlyError(\"The \\\"model\\\" attribute is required on a formly-form.\");\n        }\n      }\n    };\n  }\n  formlyForm.$inject = [\"formlyUsability\"];\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/formly-form.js\n ** module id = 5\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  require(\"./formly-custom-validation\")(ngModule);\n  require(\"./formly-field\")(ngModule);\n  require(\"./formly-form\")(ngModule);\n  require(\"./formly-focus\")(ngModule);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/index.js\n ** module id = 6\n ** module chunks = 0\n **/","\"use strict\";\n\nvar ngModuleName = \"formly\";\nvar angular = require(\"./angular-fix\");\nvar ngModule = angular.module(ngModuleName, []);\n\nrequire(\"./providers\")(ngModule);\nrequire(\"./services\")(ngModule);\nrequire(\"./directives\")(ngModule);\nrequire(\"./run\")(ngModule);\n\nmodule.exports = ngModuleName;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.common.js\n ** module id = 7\n ** module chunks = 0\n **/","\"use strict\";\n\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  ngModule.provider(\"formlyConfig\", formlyConfig);\n\n  formlyConfig.tests = ON_TEST ? require(\"./formlyConfig.test\")(ngModule) : null;\n\n  function formlyConfig(formlyUsabilityProvider) {\n    var _this2 = this;\n\n\n    var typeMap = {};\n    var templateWrappersMap = {};\n    var defaultWrapperName = \"default\";\n    var _this = this;\n    var getError = formlyUsabilityProvider.getFormlyError;\n\n    angular.extend(this, {\n      setType: setType,\n      getType: getType,\n      setWrapper: setWrapper,\n      getWrapper: getWrapper,\n      getWrapperByType: getWrapperByType,\n      removeWrapperByName: removeWrapperByName,\n      removeWrappersForType: removeWrappersForType,\n      disableWarnings: false,\n      extras: {\n        disableNgModelAttrsManipulator: false\n      },\n      templateManipulators: {\n        preWrapper: [],\n        postWrapper: []\n      },\n      $get: function () {\n        return _this2;\n      }\n    });\n\n    function setType(options) {\n      if (angular.isArray(options)) {\n        angular.forEach(options, setType);\n      } else if (angular.isObject(options)) {\n        checkType(options);\n        typeMap[options.name] = options;\n      } else {\n        throw getError(\"You must provide an object or array for setType. You provided: \" + JSON.stringify(arguments));\n      }\n    }\n\n    function getType(name, throwError, errorContext) {\n      if (!name) {\n        return undefined;\n      }\n      var type = typeMap[name];\n      if (!type && throwError === true) {\n        throw getError(\"There is no type by the name of \\\"\" + name + \"\\\": \" + JSON.stringify(errorContext));\n      } else {\n        return type;\n      }\n    }\n\n    function checkType(options) {\n      if (!options.name) {\n        throw getError(\"You must provide a name for setType. You provided: \" + JSON.stringify(arguments));\n      } else if (!options.defaultOptions && !options.template && !options.templateUrl) {\n        throw getError(\"You must provide defaultOptions OR a template OR templateUrl for setType. \" + (\"You provided none of these: \" + JSON.stringify(arguments)));\n      } else if (options.template && options.templateUrl) {\n        throw getError(\"You must provide at most a template OR templateUrl for setType. \" + (\"You provided both: \" + JSON.stringify(arguments)));\n      }\n      if (!options.overwriteOk) {\n        checkOverwrite(options.name, typeMap, options, \"types\");\n      } else {\n        delete options.overwriteOk;\n      }\n    }\n\n    function setWrapper(options, name) {\n      if (angular.isArray(options)) {\n        return options.map(function (wrapperOptions) {\n          return setWrapper(wrapperOptions);\n        });\n      } else if (angular.isObject(options)) {\n        options.types = getOptionsTypes(options);\n        options.name = getOptionsName(options, name);\n        checkWrapperAPI(options);\n        templateWrappersMap[options.name] = options;\n        return options;\n      } else if (angular.isString(options)) {\n        return setWrapper({\n          template: options,\n          name: name\n        });\n      }\n    }\n\n    function getOptionsTypes(options) {\n      if (angular.isString(options.types)) {\n        return [options.types];\n      }\n      if (!angular.isDefined(options.types)) {\n        return [];\n      } else {\n        return options.types;\n      }\n    }\n\n    function getOptionsName(options, name) {\n      return options.name || name || options.types.join(\" \") || defaultWrapperName;\n    }\n\n    function checkWrapperAPI(options) {\n      formlyUsabilityProvider.checkWrapper(options);\n      if (options.template) {\n        formlyUsabilityProvider.checkWrapperTemplate(options.template, options);\n      }\n      if (!options.overwriteOk) {\n        checkOverwrite(options.name, templateWrappersMap, options, \"templateWrappers\");\n      } else {\n        delete options.overwriteOk;\n      }\n      checkWrapperTypes(options);\n    }\n\n    function checkWrapperTypes(options) {\n      var shouldThrow = !angular.isArray(options.types) || !options.types.every(angular.isString);\n      if (shouldThrow) {\n        throw getError(\"Attempted to create a template wrapper with types that is not a string or an array of strings\");\n      }\n    }\n\n    function checkOverwrite(property, object, newValue, objectName) {\n      if (object.hasOwnProperty(property)) {\n        warn([\"Attempting to overwrite \" + property + \" on \" + objectName + \" which is currently\", \"\" + JSON.stringify(object[property]) + \" with \" + JSON.stringify(newValue), \"To supress this warning, specify the property \\\"overwriteOk: true\\\"\"].join(\" \"));\n      }\n    }\n\n    function getWrapper(name) {\n      return templateWrappersMap[name || defaultWrapperName];\n    }\n\n    function getWrapperByType(type) {\n      /* jshint maxcomplexity:6 */\n      var wrappers = [];\n      for (var name in templateWrappersMap) {\n        if (templateWrappersMap.hasOwnProperty(name)) {\n          if (templateWrappersMap[name].types && templateWrappersMap[name].types.indexOf(type) !== -1) {\n            wrappers.push(templateWrappersMap[name]);\n          }\n        }\n      }\n      return wrappers;\n    }\n\n    function removeWrapperByName(name) {\n      var wrapper = templateWrappersMap[name];\n      delete templateWrappersMap[name];\n      return wrapper;\n    }\n\n    function removeWrappersForType(type) {\n      var wrappers = getWrapperByType(type);\n      if (!wrappers) {\n        return;\n      }\n      if (!angular.isArray(wrappers)) {\n        return removeWrapperByName(wrappers.name);\n      } else {\n        wrappers.forEach(function (wrapper) {\n          return removeWrapperByName(wrapper.name);\n        });\n        return wrappers;\n      }\n    }\n\n\n    function warn() {\n      if (!_this.disableWarnings) {\n        console.warn.apply(console, arguments);\n      }\n    }\n  }\n  formlyConfig.$inject = [\"formlyUsabilityProvider\"];\n\n\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/formlyConfig.js\n ** module id = 8\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.constant(\"formlyErrorAndWarningsUrlPrefix\", \"https://github.com/formly-js/angular-formly/wiki/Errors-and-Warnings#\");\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/formlyErrorAndWarningsUrlPrefix.js\n ** module id = 9\n ** module chunks = 0\n **/","\"use strict\";\n\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  ngModule.provider(\"formlyUsability\", function () {\n    var _this = this;\n    var errorsAndWarningsUrlPrefix = \"https://github.com/formly-js/angular-formly/wiki/Errors-and-Warnings#\";\n    angular.extend(this, {\n      getFormlyError: getFormlyError,\n      getFieldError: getFieldError,\n      checkWrapper: checkWrapper,\n      checkWrapperTemplate: checkWrapperTemplate,\n      $get: function () {\n        return _this;\n      }\n    });\n\n    function getFieldError(errorInfoSlug, message, field) {\n      if (arguments.length < 3) {\n        field = message;\n        message = errorInfoSlug;\n        errorInfoSlug = null;\n      }\n      return new Error(getErrorMessage(errorInfoSlug, message) + (\" Field definition: \" + angular.toJson(field)));\n    }\n\n    function getFormlyError(errorInfoSlug, message) {\n      if (!message) {\n        message = errorInfoSlug;\n        errorInfoSlug = null;\n      }\n      return new Error(getErrorMessage(errorInfoSlug, message));\n    }\n\n    function getErrorMessage(errorInfoSlug, message) {\n      var url = \"\";\n      if (errorInfoSlug !== null) {\n        url = \"\" + errorsAndWarningsUrlPrefix + \"\" + errorInfoSlug;\n      }\n      return \"Formly Error: \" + message + \". \" + url;\n    }\n\n    function checkWrapper(wrapper) {\n      if (wrapper.template && wrapper.templateUrl) {\n        throw getFormlyError(\"Template wrappers can only have a templateUrl or a template. \" + (\"This one provided both: \" + JSON.stringify(wrapper)));\n      }\n      if (!wrapper.template && !wrapper.templateUrl) {\n        throw getFormlyError(\"Template wrappers must have one of a templateUrl or a template. \" + (\"This one provided neither: \" + JSON.stringify(wrapper)));\n      }\n    }\n\n    function checkWrapperTemplate(template, additionalInfo) {\n      var formlyTransclude = \"<formly-transclude></formly-transclude>\";\n      if (template.indexOf(formlyTransclude) === -1) {\n        throw getFormlyError(\"Template wrapper templates must use \\\"\" + formlyTransclude + \"\\\" somewhere in them. \" + (\"This one does not have \\\"<formly-transclude></formly-transclude>\\\" in it: \" + template) + \"\\n\" + (\"Additional information: \" + JSON.stringify(additionalInfo)));\n      }\n    }\n  });\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/formlyUsability.js\n ** module id = 10\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.factory(\"formlyValidationMessages\", function () {\n    var formlyValidationMessages = {\n      addTemplateOptionValueMessage: addTemplateOptionValueMessage,\n      addStringMessage: addStringMessage,\n      messages: {}\n    };\n\n    return formlyValidationMessages;\n\n    function addTemplateOptionValueMessage(name, prop, prefix, suffix, alternate) {\n      formlyValidationMessages.messages[name] = templateOptionValue(prop, prefix, suffix, alternate);\n    }\n\n    function addStringMessage(name, string) {\n      formlyValidationMessages.messages[name] = function () {\n        return string;\n      };\n    }\n\n\n    function templateOptionValue(prop, prefix, suffix, alternate) {\n      return function getValidationMessage(viewValue, modelValue, scope) {\n        if (scope.options.templateOptions[prop]) {\n          return \"\" + prefix + \" \" + scope.options.templateOptions[prop] + \" \" + suffix;\n        } else {\n          return alternate;\n        }\n      };\n    }\n  });\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/formlyValidationMessages.js\n ** module id = 11\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.constant(\"formlyVersion\", VERSION);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/formlyVersion.js\n ** module id = 12\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  require(\"./formlyUsability\")(ngModule);\n  require(\"./formlyConfig\")(ngModule);\n  require(\"./formlyVersion\")(ngModule);\n  require(\"./formlyErrorAndWarningsUrlPrefix\")(ngModule);\n  require(\"./formlyValidationMessages\")(ngModule);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/index.js\n ** module id = 13\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.run(addFormlyNgModelAttrsManipulator);\n\n  function addFormlyNgModelAttrsManipulator(formlyConfig) {\n    if (formlyConfig.extras.disableNgModelAttrsManipulator) {\n      return;\n    }\n    formlyConfig.templateManipulators.preWrapper.push(ngModelAttrsManipulator);\n  }\n  addFormlyNgModelAttrsManipulator.$inject = [\"formlyConfig\"];\n\n\n  function ngModelAttrsManipulator(template, options, scope) {\n    /* jshint maxcomplexity:7 */\n    var el = angular.element(\"<a></a>\");\n    var data = options.data;\n    if (data.noTouchy) {\n      return template;\n    }\n    el.append(template);\n    var modelEls = angular.element(el[0].querySelectorAll(\"[ng-model]\"));\n    if (!modelEls || !modelEls.length) {\n      return template;\n    }\n\n    addIfNotPresent(modelEls, \"id\", scope.id);\n    addIfNotPresent(modelEls, \"name\", scope.id);\n\n    if (angular.isDefined(options.validators)) {\n      addIfNotPresent(modelEls, \"formly-custom-validation\", \"options.validators\");\n    }\n    if (angular.isDefined(options.modelOptions)) {\n      addIfNotPresent(modelEls, \"ng-model-options\", \"options.modelOptions\");\n      if (options.modelOptions.getterSetter) {\n        modelEls.attr(\"ng-model\", \"options.value\");\n      }\n    }\n    addTemplateOptionsAttrs();\n\n    return el.html();\n\n\n    function addTemplateOptionsAttrs() {\n      if (!options.templateOptions && !options.expressionProperties) {\n        // no need to run these if there are no templateOptions or expressionProperties\n        return;\n      }\n      var to = options.templateOptions || {};\n      var ep = options.expressionProperties || {};\n\n      var ngModelAttributes = getBuiltinAttributes();\n\n      // extend with the user's specifications winning\n      angular.extend(ngModelAttributes, options.ngModelAttrs);\n\n      angular.forEach(ngModelAttributes, function (val, name) {\n        /* jshint maxcomplexity:9 */\n        var attrVal = undefined;\n        var attrName = undefined;\n        var ref = \"options.templateOptions['\" + name + \"']\";\n        var toVal = to[name];\n        var epVal = getEpValue(ep, name);\n\n        var inTo = angular.isDefined(toVal);\n        var inEp = angular.isDefined(epVal);\n        if (val.value) {\n          // I realize this looks backwards, but it's right, trust me...\n          attrName = val.value;\n          attrVal = name;\n        } else if (val.expression && inTo) {\n          attrName = val.expression;\n          if (angular.isString(to[name])) {\n            attrVal = \"$eval(\" + ref + \")\";\n          } else if (angular.isFunction(to[name])) {\n            attrVal = \"\" + ref + \"(model[options.key], options, this, $event)\";\n          } else {\n            throw new Error(\"options.templateOptions.\" + name + \" must be a string or function: \" + JSON.stringify(options));\n          }\n        } else if (val.bound && inEp) {\n          attrName = val.bound;\n          attrVal = ref;\n        } else if (val.attribute && inEp) {\n          attrName = val.attribute;\n          attrVal = \"{{\" + ref + \"}}\";\n        } else if (val.attribute && inTo) {\n          attrName = val.attribute;\n          attrVal = toVal;\n        }\n        if (angular.isDefined(attrName) && angular.isDefined(attrVal)) {\n          addIfNotPresent(modelEls, attrName, attrVal);\n        }\n      });\n    }\n\n    function getBuiltinAttributes() {\n      var ngModelAttributes = {\n        focus: {\n          attribute: \"formly-focus\"\n        }\n      };\n      var bothAttributeAndBound = [\"required\", \"disabled\", \"pattern\", \"maxlength\", \"minlength\"];\n      var expressionOnly = [\"change\", \"keydown\", \"keyup\", \"keypress\", \"click\", \"focus\", \"blur\"];\n      var attributeOnly = [\"placeholder\", \"min\", \"max\", \"tabindex\", \"type\"];\n\n      angular.forEach(bothAttributeAndBound, function (item) {\n        ngModelAttributes[item] = { attribute: item, bound: \"ng-\" + item };\n      });\n\n      angular.forEach(expressionOnly, function (item) {\n        var propName = \"on\" + item.substr(0, 1).toUpperCase() + item.substr(1);\n        ngModelAttributes[propName] = { expression: \"ng-\" + item };\n      });\n\n      angular.forEach(attributeOnly, function (item) {\n        ngModelAttributes[item] = { attribute: item };\n      });\n      return ngModelAttributes;\n    }\n\n    function getEpValue(ep, name) {\n      return ep[\"templateOptions.\" + name] || ep[\"templateOptions['\" + name + \"']\"] || ep[\"templateOptions[\\\"\" + name + \"\\\"]\"];\n    }\n\n    function addIfNotPresent(el, attr, val) {\n      if (!el.attr(attr)) {\n        el.attr(attr, val);\n      }\n    }\n  }\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./run/formlyNgModelAttrsManipulator.js\n ** module id = 14\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  require(\"./formlyNgModelAttrsManipulator\")(ngModule);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./run/index.js\n ** module id = 15\n ** module chunks = 0\n **/","\"use strict\";\n\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  ngModule.factory(\"formlyUtil\", formlyUtil);\n\n  formlyUtil.tests = ON_TEST ? require(\"./formlyUtil.test\")(ngModule) : null;\n\n  function formlyUtil() {\n    return {\n      formlyEval: formlyEval,\n      getFieldId: getFieldId,\n      reverseDeepMerge: reverseDeepMerge\n    };\n\n    function formlyEval(scope, expression, modelValue, viewValue) {\n      if (angular.isFunction(expression)) {\n        return expression(viewValue || modelValue, modelValue, scope);\n      } else {\n        return scope.$eval(expression, {\n          $viewValue: viewValue || modelValue,\n          $modelValue: modelValue\n        });\n      }\n    }\n\n    function getFieldId(formId, options, index) {\n      var type = options.type;\n      if (!type && options.template) {\n        type = \"template\";\n      } else if (!type && options.templateUrl) {\n        type = \"templateUrl\";\n      }\n\n      return [formId, type, options.key, index].join(\"_\");\n    }\n\n    function reverseDeepMerge(dest) {\n      angular.forEach(arguments, function (src, index) {\n        if (!index) {\n          return;\n        }\n        angular.forEach(src, function (val, prop) {\n          if (!angular.isDefined(dest[prop])) {\n            dest[prop] = angular.copy(val);\n          } else if (objAndSameType(dest[prop], val)) {\n            reverseDeepMerge(dest[prop], val);\n          }\n        });\n      });\n    }\n\n    function objAndSameType(obj1, obj2) {\n      return angular.isObject(obj1) && angular.isObject(obj2) && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2);\n    }\n  }\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./services/formlyUtil.js\n ** module id = 16\n ** module chunks = 0\n **/","\"use strict\";\n\nvar _toArray = function (arr) { return Array.isArray(arr) ? arr : Array.from(arr); };\n\nmodule.exports = function (ngModule) {\n  ngModule.factory(\"formlyWarn\", [\"formlyConfig\", \"formlyErrorAndWarningsUrlPrefix\", \"$log\", function (formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n    return function warn() {\n      if (!formlyConfig.disableWarnings) {\n        var args = Array.prototype.slice.call(arguments);\n        var warnInfoSlug = args.shift();\n        args.unshift(\"Formly Warning:\");\n        args.push(\"\" + formlyErrorAndWarningsUrlPrefix + \"\" + warnInfoSlug);\n        $log.warn.apply($log, _toArray(args));\n      }\n    };\n  }]);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./services/formlyWarn.js\n ** module id = 17\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  require(\"./formlyUtil\")(ngModule);\n  require(\"./formlyWarn\")(ngModule);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./services/index.js\n ** module id = 18\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_19__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"angular\"\n ** module id = 19\n ** module chunks = 0\n **/"],"sourceRoot":"","file":"formly.min.js"}